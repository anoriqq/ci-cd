version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5
  gcloud: circleci/gcp-cli@1.8.4
  gcr: circleci/gcp-gcr@0.6.1
  gke: circleci/gcp-gke@1.0.3
  gke-ext:
    orbs:
      gke: circleci/gcp-gke@1.0.3
      k8s: circleci/kubernetes@0.11.0
    commands:
      rollout-image:
        description: Update a deployment's Docker image.
        parameters:
          cluster:
            description: The Kubernetes cluster name.
            type: string
          container:
            description: The Kubernetes container name.
            type: string
          deployment:
            description: The Kubernetes deployment name.
            type: string
          image:
            description: A fully-qualified name for your docker image
            type: string
          namespace:
            default: ''
            description: The Kubernetes namespace name.
            type: string
          tag:
            default: latest
            description: Docker image tag
            type: string
          dry-run:
            default: none
            description: |
              Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
            type: string
          get-rollout-status:
            default: false
            description: |
              Get the status of the rollout.
              This can only be used for resource types that are valid
              for usage with `kubectl rollout` subcommands.
            type: boolean
          pinned-revision-to-watch:
            default: ''
            description: |
              Pin a specific revision to be watched and abort watching if it is rolled
              over by another revision.
              Only effective if get-rollout-status is set to true.
            type: string
          resource-name:
            default: ''
            description: |
              Resource name in the format TYPE/NAME e.g. deployment/nginx-deployment
              Either resource-file-path or resource-name need to be specified.
              This is required if get-rollout-status is set to true.
            type: string
          watch-rollout-status:
            default: true
            description: |
              Whether to watch the status of the latest rollout until it's done.
              Only effective if get-rollout-status is set to true.
            type: boolean
          watch-timeout:
            default: ''
            description: >
              The length of time to wait before ending the watch, zero means never.

              Any other values should contain a corresponding time unit (e.g. 1s, 2m,
              3h).

              Only effective if get-rollout-status is set to true.
            type: string
        steps:
          - gke/update-kubeconfig-with-credentials:
              cluster: <<parameters.cluster>>
          - run:
              command: >
                DRY_RUN="<< parameters.dry-run >>"

                if [ -n "<<parameters.namespace>>" ]; then
                  set -- "$@" --namespace="<<parameters.namespace>>"
                fi

                set -- "$@" "--dry-run=${DRY_RUN}"

                kubectl set image deployment <<parameters.deployment>>
                <<parameters.container>>=<<parameters.image>>:<<parameters.tag>> "$@"
              name: Roll out image
          - when:
              condition: << parameters.get-rollout-status >>
              steps:
                - k8s/get-rollout-status:
                    namespace: << parameters.namespace >>
                    pinned-revision-to-watch: << parameters.pinned-revision-to-watch >>
                    resource-name: << parameters.resource-name >>
                    watch-rollout-status: << parameters.watch-rollout-status >>
                    watch-timeout: << parameters.watch-timeout >>
  kube: circleci/kubernetes@0.11.0
jobs:
  build:
    docker:
      - image: circleci/node:12.16.2
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock"}}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock"}}
          paths:
            - ~/.cache/yarn
      - run:
          name: Run Lint
          command: yarn run lint:ci
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports
  test:
    docker:
      - image: circleci/node:12.16.2
    steps:
      - checkout
      - run:
          name: Install JUnit coverage reporter
          command: yarn add -D jest-junit
      - run:
          name: Run tests with JUnit as reporter
          environment:
            JEST_JUNIT_OUTPUT_DIR: 'reports/jest/results.xml'
          command: yarn run test:ci
      - codecov/upload:
          file: ./coverage/lcov.info
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports
  build-and-push-docker-image:
    docker:
      - image: cimg/base:2020.04
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - gcr/gcr-auth
      - gcr/build-image:
          image: ci-cd
          tag: $CIRCLE_SHA1
      - run:
          name: Tag Image
          command: docker tag gcr.io/anoriqq-ci-cd/ci-cd:$CIRCLE_SHA1 gcr.io/anoriqq-ci-cd/ci-cd:latest
      - run: docker image ls
      - gcr/push-image:
          image: ci-cd
      - gcr/push-image:
          image: ci-cd
          tag: $CIRCLE_SHA1
  deploy:
    docker:
      - image: cimg/base:2020.04
    steps:
      - checkout
      - gcloud/install
      - gcloud/initialize
      - gke/install
      - gke-ext/rollout-image:
          cluster: ci-cd-dev
          container: ci-cd
          deployment: ci-cd-deployment
          image: gcr.io/anoriqq-ci-cd/ci-cd
          tag: $CIRCLE_SHA1
          get-rollout-status: true
          resource-name: deployment/ci-cd-deployment
          watch-timeout: 5m
  dry-deploy:
    docker:
      - image: cimg/base:2020.04
    steps:
      - checkout
      - gcloud/install
      - gcloud/initialize
      - gke/install
      - gke-ext/rollout-image:
          cluster: ci-cd-dev
          container: ci-cd
          deployment: ci-cd-deployment
          image: gcr.io/anoriqq-ci-cd/ci-cd
          tag: $CIRCLE_SHA1
          dry-run: client
workflows:
  build-test-and-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - build-and-push-docker-image:
          requires:
            - test
      - deploy:
          requires:
            - build-and-push-docker-image
          filters:
            branches:
              only:
                - master
      - dry-deploy:
          requires:
            - build-and-push-docker-image
          filters:
            branches:
              ignore:
                - master
